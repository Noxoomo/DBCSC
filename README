----
Run:
after sbt compile and creation of one-jar for server
 java -cp DBCSC/target/scala-2.10/classes -jar dbcsc_2.10-0.01-one-jar.jar  NodeName — start server, you should create
    NodeName folder with akka (=> this node) config

after sbt compile and creation of one-jar for client
 java -cp DBCSC/target/scala-2.10/classes -jar dbcsc_2.10-0.01-one-jar.jar nodes akka, where nodes — file with
 node actor adress per line
 akka - akka config file


Or just run: sbt run cmd and choose class to load
 Example of akka config and how to test nodes on remote systems you could find in test/resources/distributedTests/ThreeNodeTest/ManualTestNodes
----

API (console)
insert key->value //insert, if key exists -> error
get key // get key, if no key found -> error
remove key //delete key, if succesufull -> report, if can't delete -> can't delete message, if no key found -> no key found error
update key->value //update value of the key if key exists
quit // quit
----

DataBase Format:
DB:
blocks of keySizeValueSizeBooleankeyValue
To fast adress  - using indexes
----

Cache:
Database all operations proceed on disk, for fast access uses cache


---
index format:
sorted by key keyLenKeyfileIdOffset array of bytes on disk

merge databases:
db1 & db2: all operations in db1 < operations in db2
db should be keyLenKeyStatus(if status not removed =>  valueLenkeyvalue,else key)   sorted by key
than we merge db1 and db2 to new file

1) merge sort of indexes, prior to db2
2) create new file for dbMerge








This file was modified by IntelliJ IDEA 12.1.4 for binding GitHub repository